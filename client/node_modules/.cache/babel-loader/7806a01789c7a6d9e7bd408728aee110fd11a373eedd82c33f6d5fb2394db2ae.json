{"ast":null,"code":"// import { createContext, useContext, useState, useEffect } from \"react\";\n\n// interface AuthContextType {\n//   isAuthenticated: boolean;\n//   login: (token: string, refreshToken: string) => void;\n//   logout: () => void;\n// }\n\n// const AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n//   const [isAuthenticated, setIsAuthenticated] = useState<boolean>(!!localStorage.getItem(\"accessToken\"));\n\n//   useEffect(() => {\n//     setIsAuthenticated(!!localStorage.getItem(\"accessToken\"));\n//   }, []);\n\n//   const login = (token: string, refreshToken: string) => {\n//     localStorage.setItem(\"accessToken\", token);\n//     localStorage.setItem(\"refreshToken\", refreshToken);\n//     setIsAuthenticated(true);\n//   };\n\n//   const logout = () => {\n//     localStorage.removeItem(\"accessToken\");\n//     localStorage.removeItem(\"refreshToken\");\n//     setIsAuthenticated(false);\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ isAuthenticated, login, logout }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export const useAuth = () => {\n//   const context = useContext(AuthContext);\n//   if (!context) {\n//     throw new Error(\"useAuth must be used within an AuthProvider\");\n//   }\n//   return context;\n// };\n//","map":{"version":3,"names":[],"sources":["D:/University studies/Introduction to Machine Learning/Final project/Machine_learning_AI_Assistant/client/src/context/AuthContext.tsx"],"sourcesContent":["// import { createContext, useContext, useState, useEffect } from \"react\";\r\n\r\n// interface AuthContextType {\r\n//   isAuthenticated: boolean;\r\n//   login: (token: string, refreshToken: string) => void;\r\n//   logout: () => void;\r\n// }\r\n\r\n// const AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\n// export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n//   const [isAuthenticated, setIsAuthenticated] = useState<boolean>(!!localStorage.getItem(\"accessToken\"));\r\n\r\n//   useEffect(() => {\r\n//     setIsAuthenticated(!!localStorage.getItem(\"accessToken\"));\r\n//   }, []);\r\n\r\n//   const login = (token: string, refreshToken: string) => {\r\n//     localStorage.setItem(\"accessToken\", token);\r\n//     localStorage.setItem(\"refreshToken\", refreshToken);\r\n//     setIsAuthenticated(true);\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     localStorage.removeItem(\"accessToken\");\r\n//     localStorage.removeItem(\"refreshToken\");\r\n//     setIsAuthenticated(false);\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={{ isAuthenticated, login, logout }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export const useAuth = () => {\r\n//   const context = useContext(AuthContext);\r\n//   if (!context) {\r\n//     throw new Error(\"useAuth must be used within an AuthProvider\");\r\n//   }\r\n//   return context;\r\n// };\r\n// "],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}